
import { useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { supabase } from '@/integrations/supabase/client';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Loader2, Send, Copy } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

const PromptGenerator = () => {
  const [promptText, setPromptText] = useState('');
  const [title, setTitle] = useState('');
  const [generatedResult, setGeneratedResult] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const { user } = useAuth();
  const { toast } = useToast();

  const generatePrompt = async () => {
    if (!promptText.trim()) {
      toast({
        title: 'Prompt text required',
        description: 'Please enter a prompt to generate content.',
        variant: 'destructive',
      });
      return;
    }

    setIsGenerating(true);

    try {
      // Mock AI generation for now
      // In a real application, this would call an actual AI API
      await new Promise((resolve) => setTimeout(resolve, 1500));
      
      const mockResponse = `Here's a generated response for: "${promptText}"\n\nThis is a simulated AI response that would typically be generated by calling an external AI API such as OpenAI, Anthropic, or another LLM provider. In a production environment, this would contain the actual AI-generated content based on the user's prompt.`;
      
      setGeneratedResult(mockResponse);
    } catch (error) {
      console.error('Error generating prompt:', error);
      toast({
        title: 'Generation failed',
        description: 'There was an error generating your prompt.',
        variant: 'destructive',
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const savePrompt = async () => {
    if (!user) {
      toast({
        title: 'Authentication required',
        description: 'Please sign in to save prompts.',
        variant: 'destructive',
      });
      return;
    }

    if (!promptText.trim() || !generatedResult.trim()) {
      toast({
        title: 'Missing content',
        description: 'Please generate a prompt before saving.',
        variant: 'destructive',
      });
      return;
    }

    setIsSaving(true);

    try {
      const { error } = await supabase.from('prompts').insert({
        user_id: user.id,
        prompt_text: promptText,
        generated_result: generatedResult,
        title: title.trim() || null,
      });

      if (error) {
        throw error;
      }

      toast({
        title: 'Prompt saved',
        description: 'Your prompt has been saved to your history.',
      });

      // Reset the form
      setPromptText('');
      setTitle('');
      setGeneratedResult('');
    } catch (error) {
      console.error('Error saving prompt:', error);
      toast({
        title: 'Save failed',
        description: 'There was an error saving your prompt.',
        variant: 'destructive',
      });
    } finally {
      setIsSaving(false);
    }
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(generatedResult);
    toast({
      title: 'Copied to clipboard',
      description: 'The generated prompt has been copied to your clipboard.',
    });
  };

  return (
    <Card className="mb-6">
      <CardHeader>
        <CardTitle>Create New Prompt</CardTitle>
        <CardDescription>
          Describe what you need and our AI will generate the perfect prompt for you.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div>
            <Input
              placeholder="Title (optional)"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="mb-2"
            />
            <Textarea
              placeholder="Describe what you need... (e.g., I need a prompt for an AI that will help users create marketing content)"
              value={promptText}
              onChange={(e) => setPromptText(e.target.value)}
              rows={4}
              className="resize-none"
            />
          </div>

          <div className="flex justify-end">
            <Button onClick={generatePrompt} disabled={isGenerating || !promptText.trim()}>
              {isGenerating ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Send className="mr-2 h-4 w-4" />
                  Generate Prompt
                </>
              )}
            </Button>
          </div>

          {generatedResult && (
            <div className="mt-6 space-y-4">
              <div className="border-t pt-4">
                <h3 className="font-medium mb-2">Generated Prompt:</h3>
                <div className="bg-muted p-4 rounded-md whitespace-pre-wrap">
                  {generatedResult}
                </div>
              </div>

              <div className="flex space-x-2 justify-end">
                <Button variant="outline" onClick={copyToClipboard}>
                  <Copy className="mr-2 h-4 w-4" />
                  Copy
                </Button>
                <Button onClick={savePrompt} disabled={isSaving}>
                  {isSaving ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Saving...
                    </>
                  ) : (
                    'Save Prompt'
                  )}
                </Button>
              </div>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default PromptGenerator;
